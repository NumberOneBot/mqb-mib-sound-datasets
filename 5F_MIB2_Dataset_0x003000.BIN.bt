//------------------------------------------------
//--- 010 Editor v13.0 Binary Template
//
//      File: 0x003000.BIN
//   Authors: Alex Strelets
//   Version: 0.6
//   Purpose: Parse the contents of the MIB2 Sound Channels and Effects
//  Category:
// File Mask:
//  ID Bytes:
//   History: 0.1   -  Initial version
//            0.2   -  Limiters added
//            0.3   -  MIB1 vs MIB2 data sync
//            0.5   - 'Sound Effects' table optimizations,
//                     renaming, refactoring, cleanup
//            0.5.1 -  THD max property found
//            0.6   -  Cosmetic output changes,
//                     corrected delay calculation
//------------------------------------------------

BigEndian();

string getAmpMode(int type) {
    switch (type) {
        case 0x10: return "2 channels - front";
        case 0x20: return "4 channels - front/rear";
        case 0x21: return "4ch / 2ch compatible";
        case 0x25: return "5ch - front/rear/center";
        case 0x30: return "6ch - front/rear/center DVC sub";
        case 0x31: return "6ch - front/rear/center DVC sub / 2/4ch compatible";
        case 0x32: return "6ch double SVC or DVC sub";
        case 0x33: return "6ch double SVC or DVC sub";
        case 0x34: return "6ch - lows/mids/highs, no rear speakers";
        case 0x35: return "6ch - lows/mids/highs, no rear speakers / 2/4ch compatible";
        default:   return "Unknown";
    }
}

string getFilterType(int type) {
    switch (type) {
        case 0x00: return "Bypass";
        case 0x01: return "High Shelf 1";
        case 0x02: return "High Shelf 2";
        case 0x03: return "Low Shelf 1";
        case 0x04: return "Low Shelf 2";
        case 0x05: return "INVALID";
        case 0x06: return "Peak";
        case 0x07: return "Highpass 1";
        case 0x08: return "Highpass 2";
        case 0x09: return "Lowpass 1";
        case 0x0A: return "Lowpass 2";
        case 0x10: return "INVALID";
        default:   return "Unknown";
    }
}

typedef struct {
    ubyte Type <bgcolor=cAqua, read=getFilterType>;
    ubyte Quality <bgcolor=cLtGreen>;   // [0.2 .. 5]
    ushort Frequency <bgcolor=cGreen>;  // [20 .. 20000]
    ubyte GainOffset <bgcolor=cDkAqua>; // [-6 .. +6]
    ubyte MaxGain <bgcolor=cDkAqua>;    // [0  .. 15]
} EQ;

typedef struct {
    ubyte Type <bgcolor=cAqua, read=getFilterType>;
    ubyte Quality <bgcolor=cLtGreen>;
    ushort Frequency <bgcolor=cGreen>;
    ubyte Gain[19] <bgcolor=cDkAqua>;
} EQ2;

typedef struct (int length) {
    ubyte Type <bgcolor=cAqua, read=getFilterType>;
    ubyte Quality <bgcolor=cLtGreen>;
    ushort Frequency <bgcolor=cGreen>;
    byte Gain <bgcolor=cDkAqua>; // [-12.5 .. 12.5]
    ubyte Coefficients[length] <bgcolor=cDkGray>;
} EQ3;

typedef struct {
    EQ3 Filter1(16);
    EQ3 Filter2(16);
    EQ3 Filter3(16);
    EQ3 Filter4(0);
    EQ3 Filter5(0);
    EQ3 Filter6(0);
    EQ3 Filter7(0);
    byte Gain <bgcolor=cLtYellow>;
    byte Delay <bgcolor=cYellow>;
    ubyte Phase <bgcolor=cDkYellow>;
} CarEQ;

float calcQuality (ubyte value) {
    return (float) value / 10;
}

float calcGain (byte value) {
    return (float) value / 12.5;
}

float calcAbsGain (ubyte value) {
    return (float) value / 12.5;
}

float calcMaxGain (ubyte value) {
    return (float) value / 15;
}

float calcDelay (byte value) {
    return (float) value / 10;
}

void printEQ2(EQ2 &s, string name, int unknownFlag) {
    Printf("\n%s", name);
    Printf("\nType  \t     Quality  Frequency\n");
    Printf("==================================\n");
    Printf("%-13s%7.1f    %6gHz\n",
        getFilterType(s.Type),
        calcQuality(s.Quality),
        s.Frequency);
    Printf("==================================\n");
    if (!unknownFlag) {
        Printf("Volume: \t");
        for (i = 0; i < 19; i++) {
            Printf("%5g   ", 18 - i);
        }
        Printf("\n");
    }
    Printf("Gain:   \t");
    for (i = 0; i < 19; i++) {
        Printf("%5.2fdB ", calcAbsGain(s.Gain[i]));
    }
    Printf("\n");
}

local string spacer = "\t\t\t";

void printEQFilter(EQ3 &filter, int index) {
    local string str = (index > 1 ? "\n" : spacer);
    Printf("%-13s  %5.1f     %6gHz\t%5.2fdB %s",
        getFilterType(filter.Type),
        calcQuality(filter.Quality),
        filter.Frequency,
        calcGain(filter.Gain),
        str);
}

void printProfileName (int index) {
    Printf("[CarEQ Profile #%i]                      %s", index, index > 1 ? "\n\n": spacer);
}

string getChannelName(int index) {
    switch (index) {
        case 0: return "REAR_RIGHT "; break;
        case 1: return "FRONT_RIGHT"; break;
        case 2: return "FRONT_LEFT "; break;
        case 3: return "REAR_LEFT  "; break;
        case 4: return "SUBWOOFER  "; break;
        case 5: return "CENTER     "; break;
    }
    return Str("CHANNEL_%i", index+1);
}

string getEQBand(int index) {
    switch (index) {
        case 0: return "Bass      "; break;
        case 1: return "Mid-Bass  "; break;
        case 2: return "Mid       "; break;
        case 3: return "Mid-Treble"; break;
        case 4: return "Treble    "; break;
    }
    return Str("Band_%i", index+1);
}

void printChannelHeader(CarEQ eq[], int index, int profileIndex) {
    local string str = (profileIndex > 1 ? "\n" : spacer);

    Printf("%s [Gain: %-6.2fdB Delay: %2gms  Phase: %sÂ°]%s",
        getChannelName(index),
        calcGain(eq[index].Gain),
        calcDelay(eq[index].Delay),
        (char) eq[index].Phase > 0 ? 'R' : '0',
        str);
}

void printLines() {
    local string str = "-------------------------------------------------------%s";
    Printf(str, spacer);
    Printf(str, "\n");
}

void printDoubleLines() {
    local string str = "================================================%s";
    Printf(str, spacer);
    Printf(str, "\n");
}

void printFiltersHeader() {
    local string str = "Type    \t     Quality    Frequency\t Gain %s";
    Printf(str, spacer);
    Printf(str, "\n");
}


byte AmpMode <bgcolor=cDkGreen, read=getAmpMode>;
EQ ToneControls[5];
ubyte Subwoofer_MaxGain <bgcolor=cLtYellow>;
EQ2 LoudnessLow;
EQ2 LoudnessHigh;
struct {
    ubyte value[19] <bgcolor=cGray>;
} GALA[7];
EQ2 VirtualSub;
EQ2 GADKSurround;
CarEQ Profile1[6] <optimize=true>;
CarEQ Profile2[6] <optimize=true>;

// one of those bytes is "Limiter MaxTHD" [0 .. 70]
struct {
    byte unknown[6] <bgcolor=cPurple>;
    byte MaxTHD <bgcolor=cBlue>;
} Limiters;

struct {
    ubyte attackTime <bgcolor=cDkGreen>;
    ushort releaseTime <bgcolor=cGreen>;
    ubyte threshold <bgcolor=cLtGreen>;
    ubyte holdTime <bgcolor=cAqua>;
} DRC[6];

FSeek(FileSize() - 4);

struct {
    char major <bgcolor=cDkBlue>;
    char minor <bgcolor=cDkBlue>;
} DatasetVersion;
ushort checksum <bgcolor=cDkRed>;

////////////////////////
/// PARSING FINISHED ///
////////////////////////

local int i = 0;
local int j = 0;
local int k = 0;

local ushort file_checksum = Checksum(CHECKSUM_CRCCCITT, 0, FileSize() - 2, -1, -1); // algo, size, length, poly, init
Printf("================================================");
Printf("\nFILE CHECKSUM (TO BE CORRECTED MANUALLY!): %.04X \n", file_checksum);
Printf("================================================");
Printf("\n\nAMPLIFIER MODE: %s\n", getAmpMode(AmpMode));

Printf("\n\nTONE CONTROLS");
Printf("\nBand\t   Type\t\tQuality\t Frequency   MaxGain   GainOffset\n");
Printf("===========================================================================\n");
Printf("Subwoofer                        \t\t  %7.2f\n", calcMaxGain(Subwoofer_MaxGain));
for (i = 0; i < 5; i++) {
    Printf("%-8s   %-13s  %7.1f\t %6gHz\t  %7.2f\t%10.2f\n",
        getEQBand(i),
        getFilterType(ToneControls[i].Type),
        calcQuality(ToneControls[i].Quality),
        ToneControls[i].Frequency,
        calcMaxGain(ToneControls[i].MaxGain),
        ToneControls[i].GainOffset / 12);
}
Printf("===========================================================================\n\n\n");



printEQ2(LoudnessLow, "LOUDNESS - Bass Boost", false);
printEQ2(LoudnessHigh, "LOUDNESS - Treble Boost", false);
printEQ2(VirtualSub, "Virtual Sub", true);
printEQ2(GADKSurround, "GADK-Surround", true);

Printf("\n\n\nGALA (SPEED-DEPENDENT VOLUME CONTROL)");
Printf("\nVolume   \t Gain steps (dB)\n");
Printf("==========================================");
Printf("==========================================");
Printf("==========================================\n");
for ( i = 0; i < 7; i++ ) {
    Printf("%-8i\t", i+1);
    for ( j = 0; j < 19; j++ ) {
        Printf("%5.2f ", calcAbsGain(GALA[i].value[j]));
    }
    Printf("\n");
};
Printf("==========================================");
Printf("==========================================");
Printf("==========================================\n\n");

Printf("\n\n");

printProfileName(1);
printProfileName(2);
for (i = 0; i < 6; i++) {
    printChannelHeader(Profile1, i, 1);
    printChannelHeader(Profile2, i, 2);
    printLines();
    printFiltersHeader();
    printDoubleLines();
    printEQFilter(Profile1[i].Filter1, 1);
    printEQFilter(Profile2[i].Filter1, 2);
    printEQFilter(Profile1[i].Filter2, 1);
    printEQFilter(Profile2[i].Filter2, 2);
    printEQFilter(Profile1[i].Filter3, 1);
    printEQFilter(Profile2[i].Filter3, 2);
    printEQFilter(Profile1[i].Filter4, 1);
    printEQFilter(Profile2[i].Filter4, 2);
    printEQFilter(Profile1[i].Filter5, 1);
    printEQFilter(Profile2[i].Filter5, 2);
    printEQFilter(Profile1[i].Filter6, 1);
    printEQFilter(Profile2[i].Filter6, 2);
    printEQFilter(Profile1[i].Filter7, 1);
    printEQFilter(Profile2[i].Filter7, 2);
    printDoubleLines();
    Printf("\n\n");
}

Printf("LIMITERS");
Printf("\t\t\t        THD\n");
Printf("----------------------------------------------\n");
for (i = 0; i < 6; i++) {
    Printf("%3i   ", Limiters.unknown[i]);
}
Printf("| %3i", Limiters.MaxTHD);
Printf("\n\n");

Printf("DYNAMIC RANGE COMPRESSION (DRC)\n");
Printf("Channel      Threshold   Attack     Hold     Release\n");
Printf("======================================================\n");
for (i = 0; i < 6; i++) {
    Printf("%s  %5.1fdB   %6.1fms  %6.1fms    %4gms\n",
        getChannelName(i),
        DRC[i].threshold / -20,         // [-20 .. 0]
        (float) DRC[i].attackTime / 20, // [0.5 .. 10]
        (float) DRC[i].holdTime / 20,   // [0 .. 20]
        DRC[i].releaseTime              // [5 .. 1000]
    );
}
Printf("======================================================");
Printf("\n\n\n================================================");
Printf("\nFILE CHECKSUM (TO BE CORRECTED MANUALLY!): %.04X", file_checksum);
Printf("\n================================================");
